<snippet>
	<content><![CDATA[
// Requires lazy_tag
template<typename Q>
struct segment_tree{
	segment_tree(): segment_tree(0){}
	segment_tree(int n): segment_tree(vector<Q>(n)){}
	segment_tree(const vector<Q> &v): n((int)v.size()){ // O(n)
		log = __lg(n + 1) + 1;
		size = 1 << log;
		val = vector<Q>(size << 1);
		copy(v.begin(), v.end(), val.begin() + size);
		for(int i = size - 1; i >= 1; -- i) update(i);
	}
	void update(int p, Q x){ // O(log n)
		assert(0 <= p && p < n);
		p += size;
		val[p] = x;
		for(int i = 1; i <= log; ++ i) update(p >> i);
	}
	Q query(int p){ // O(log n)
		assert(0 <= p && p < n);
		return val[p + size];
	}
	Q query(int l, int r){ // O(log n)
		assert(0 <= l && l <= r && r <= n);
		Q sml{}, smr{};
		l += size, r += size;
		for(; l < r; l >>= 1, r >>= 1){
			if(l & 1) sml = sml + val[l ++];
			if(r & 1) smr = val[-- r] + smr;
		}
		return sml + smr;
	}
	Q query_all(){ return val[1]; } // O(1)
	template<typename F> int partition_point_pref(int l, F f){ // O(log n)
		assert(0 <= l && l <= n);
		if(l == n) return n;
		l += size;
		Q sm{};
		do{
			while(~l & 1) l >>= 1;
			if(!f(sm + val[l])){
				while(l < size){
					l = l << 1;
					if(f(sm + val[l])) sm = sm + val[l ++];
				}
				return l - size;
			}
			sm = sm + val[l ++];
		}while((l & -l) != l);
		return n;
	} // f(sum[l, r)) is T, T, ..., T, F, F, ..., F, returns max r with T
	template<typename F> int partition_point_suff(int r, F f){ // O(log n)
		assert(0 <= r && r <= n);
		if(r == 0) return 0;
		r += size;
		Q sm{};
		do{
			-- r;
			while (r > 1 && r & 1) r >>= 1;
			if(!f(val[r] + sm)){
				while(r < size){
					r = r << 1 | 1;
					if(f(val[r] + sm)) sm = val[r --] + sm;
				}
				return r + 1 - size;
			}
			sm = val[r] + sm;
		}while((r & -r) != r);
		return 0;
	} // f(sum[l, r)) is F, F, ..., F, T, T, ..., T, returns min l with T
	int n, size, log;
	vector<Q> val;
	void update(int i){ val[i] = val[i << 1] + val[i << 1 | 1]; }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segment_tree</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
